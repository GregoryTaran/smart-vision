// ==========================
// üé§ Smart Vision ‚Äî Voice to Whisper (pseudo-stream + overlap + live typing)
// ==========================

const button = document.createElement("button");
const output = document.createElement("div");
const container = document.querySelector(".vision-container");

button.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å";
button.className = "voice-btn";
output.className = "vision-output";
container.appendChild(button);
container.appendChild(output);

let mediaRecorder;
let isRecording = false;
let lastChunk = null;
let partialText = "";

// –ê–≤—Ç–æ–≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ API (–ª–æ–∫–∞–ª—å–Ω–æ / –ø—Ä–æ–¥)
const API_BASE =
  location.hostname === "localhost" || location.hostname === "127.0.0.1"
    ? "http://127.0.0.1:5001/smart-vision-888/us-central1"
    : "https://us-central1-smart-vision-888.cloudfunctions.net";

// üé¨ –ü–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ‚Äú–≤–∂–∏–≤—É—é‚Äù
function typeText(newText) {
  const clean = newText.trim();
  if (!clean) return;

  const textToAdd = (partialText ? " " : "") + clean;
  let i = 0;

  const interval = setInterval(() => {
    if (i < textToAdd.length) {
      output.textContent += textToAdd[i];
      i++;
    } else {
      clearInterval(interval);
    }
  }, 25);

  partialText += clean;
}

// üéß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞ –Ω–∞ Whisper
async function sendToWhisper(blob) {
  const reader = new FileReader();
  reader.onloadend = async () => {
    const base64data = reader.result.split(",")[1];
    try {
      const res = await fetch(`${API_BASE}/speakToWhisper`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ audio: base64data, ext: "webm" }),
      });
      const data = await res.json();
      if (data.ok && data.text) {
        typeText(data.text);
      } else if (data.error) {
        console.warn("–û—à–∏–±–∫–∞ Whisper:", data.error);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", err);
    }
  };
  reader.readAsDataURL(blob);
}

// üü¢ –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏
button.addEventListener("click", async () => {
  if (!isRecording) {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      partialText = "";
      output.textContent = "üéô –°–ª—É—à–∞—é...";
      lastChunk = null;

      // üîÅ –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
      mediaRecorder.start(2000);

      mediaRecorder.ondataavailable = async (e) => {
        const current = e.data;
        if (current.size === 0) return;

        let merged = current;

        // üß© –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ 0.5 —Å–µ–∫ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞–Ω–∫–∞
        if (lastChunk) {
          const overlap = lastChunk.slice(-500000); // ‚âà 0.5 —Å–µ–∫
          merged = new Blob([overlap, current], { type: "audio/webm" });
        }

        sendToWhisper(merged);
        lastChunk = current;
      };

      mediaRecorder.onstop = () => {
        button.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å";
        button.classList.remove("active");
      };

      isRecording = true;
      button.textContent = "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å";
      button.classList.add("active");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:", err);
      alert("‚ö†Ô∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  } else {
    mediaRecorder.stop();
    isRecording = false;
  }
});
